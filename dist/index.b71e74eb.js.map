{"mappings":"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GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IAClD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG;IACnD,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,EAAE,GACV,GAAG,GAAG,CAAC,CAAC,EAAE;IACd,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GACV,GAAG,GAAG,CAAC,CAAC,EAAE,GACV,GAAG,GAAG,CAAC,CAAC,EAAE,GACV,GAAG,GAAG,CAAC,CAAC,EAAE;IACd,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACrG,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACvG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACrG,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACvG,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACvG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACrG,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACvG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACrG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACrG,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACvG,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,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AC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IAClD,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IACnD,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG;IACnD,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,EAAE,GAAG,CAAC,CAAC,EAAE;IACT,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG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AC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;AAC32C,CAAC;AAMM,GAAG,CAAC,GAAG,GAAG,QAAQ;AAMlB,GAAG,CAAC,GAAG,GAAG,QAAQ;;;;;ACj3DzB,EAGG,AAHH;;;CAGG,AAHH,EAGG,CAEH,EAIG,AAJH;;;;CAIG,AAJH,EAIG,6CAEa,MAAM;;AAYtB,EAKG,AALH;;;;;CAKG,AALH,EAKG,+CAEa,QAAQ;;AAOxB,EAQI,AARJ;;;;;;;;EAQI,AARJ,EAQI,mDAEY,YAAY;;AAS5B,EAYG,AAZH;;;;;;;;;;;;CAYG,AAZH,EAYG,mDAEa,YAAY;;AAiB5B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,+CAEa,QAAQ;;AAIxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AAexB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAcvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAcvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAcvB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,iDAEa,UAAU;;AAU1B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,0CAEa,GAAG;;AAcnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,yCAEa,EAAE;;AAalB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAMnB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,4CAEa,KAAK;;AA4CrB,EAKG,AALH;;;;;CAKG,AALH,EAKG,6CAEa,MAAM;;AActB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AActB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,gDAEa,SAAS;;AAOzB,EAUG,AAVH;;;;;;;;;;CAUG,AAVH,EAUG,+CAEa,QAAQ;;AAiCxB,EASG,AATH;;;;;;;;;CASG,AATH,EASG,gDAEa,SAAS;;AAiBzB,EAKG,AALH;;;;;CAKG,AALH,EAKG,0CAEa,GAAG;;2CAWR,KAAK;;gDAYL,UAAU;;0CAUV,IAAI;;yCAaJ,GAAG;;yCAWH,GAAG;;yCAMH,GAAG;;2CAWH,KAAK;;yCAUL,GAAG;;0CAYH,IAAI;;4CAQJ,MAAM;;yCAMN,GAAG;;mDASH,aAAa;;4CAMb,MAAM;;+CAUN,SAAS;;iDAST,WAAW;;4CASX,MAAM;;gDAaN,UAAU;;4CAyCV,MAAM;;6CAqBN,OAAO;;AAvrBlB,GAAM;AACN,GAAM;AACN,GAAM;AACN,GAAM;SAYU,MAAM,GAAG,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAEnC,EAAE,EAAE,SAAQ,CAAC,UAAU,IAAI,YAAY,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACZ,CAAC;IAED,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,QAAQ,CAAC,GAAG,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;IAC5C,GAAG,GAAG,GAAG,GAAG,GAAG;IACf,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG;IACrB,MAAM,CAAC,GAAG;AACZ,CAAC;SAee,YAAY,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC;IACzC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAG;IAC/B,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAG;IAE1B,EAAE,EAAE,CAAC,GAAG,SAAQ,CAAC,OAAO,EAAE,CAAC;QACzB,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACtB,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACtB,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM,CAAC;QACN,EAAqE,AAArE,mEAAqE;QACrE,QAAQ,CAAC,CAAC,IAAI,CAAC;QACf,QAAQ,CAAC,CAAC,IAAI,CAAC;QACf,QAAQ,CAAC,CAAC,IAAI,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;IACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,GAAG,UAAU,GAAG,CAAC;AAClD,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,IAAI,GAAG;IACV,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GACjB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACrB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,IAAI,GAAG;IACV,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GACjB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACrB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,IAAI,GAAG;IACV,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GACjB,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACrB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAClC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACvD,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC3B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACvC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACxC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC1B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACvC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;IACxC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IACd,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACrD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,EAAE,CAAC,GAAG,EAAE,CAAC;IACT,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IACjB,GAAG,CAAC,GAAG,EAAE,GAAG;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,EAAc,AAAd,YAAc;IACd,EAAwD,AAAxD,sDAAwD;IACxD,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAE,CAAc,AAAd,EAAc,AAAd,YAAc;IAEvD,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAE,CAA8B,AAA9B,EAA8B,AAA9B,4BAA8B;IAE7E,EAAE,EAAE,KAAK,GAAG,CAAG,EAAE,CAAC;QAChB,KAAK,IAAI,KAAK;QACd,EAAE,IAAI,EAAE;QACR,EAAE,IAAI,EAAE;QACR,EAAE,IAAI,EAAE;QACR,EAAE,IAAI,EAAE;IACV,CAAC,AAAC,CAAyB,AAAzB,EAAyB,AAAzB,uBAAyB;IAG3B,EAAE,EAAE,CAAG,GAAG,KAAK,GAAG,SAAQ,CAAC,OAAO,EAAE,CAAC;QACnC,EAAwB,AAAxB,sBAAwB;QACxB,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK;QACvB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK;QACtB,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAG,GAAG,CAAC,IAAI,KAAK,IAAI,KAAK;QAC5C,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAI,KAAK;IACtC,CAAC,MAAM,CAAC;QACN,EAA6C,AAA7C,2CAA6C;QAC7C,EAA2C,AAA3C,yCAA2C;QAC3C,MAAM,GAAG,CAAG,GAAG,CAAC;QAChB,MAAM,GAAG,CAAC;IACZ,CAAC,AAAC,CAAyB,AAAzB,EAAyB,AAAzB,uBAAyB;IAG3B,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE;IAClC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE;IAClC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE;IAClC,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE;IAClC,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,MAAM,CAAC,GAAG,EAAE,CAAC;IAC3B,EAA6D,AAA7D,2DAA6D;IAC7D,EAAoE,AAApE,kEAAoE;IACpE,GAAG,CAAC,EAAE,GAAG,SAAQ,CAAC,MAAM;IACxB,GAAG,CAAC,EAAE,GAAG,SAAQ,CAAC,MAAM;IACxB,GAAG,CAAC,EAAE,GAAG,SAAQ,CAAC,MAAM;IACxB,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;IACnC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE;IACzB,GAAG,CAAC,CAAC,IAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE;IACnD,GAAG,CAAC,CAAC,IAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE;IACnD,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE;IAC7C,GAAG,CAAC,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE;IAC7C,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,IAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC/C,GAAG,CAAC,MAAM,GAAG,IAAG,GAAG,CAAG,GAAG,IAAG,GAAG,CAAC,CAAE,CAAoE,AAApE,EAAoE,AAApE,kEAAoE;IAEtG,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,MAAM;IACrB,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,MAAM;IACrB,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,MAAM;IACrB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,MAAM;IACpB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAae,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAChC,EAAoE,AAApE,kEAAoE;IACpE,EAAoD,AAApD,kDAAoD;IACpD,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,GAAG,CAAC,KAAK;IAET,EAAE,EAAE,MAAM,GAAG,CAAG,EAAE,CAAC;QACjB,EAAwC,AAAxC,sCAAwC;QACxC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAG,EAAG,CAAK,AAAL,EAAK,AAAL,GAAK;QAEtC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,KAAK;QACpB,KAAK,GAAG,GAAG,GAAG,KAAK,CAAE,CAAS,AAAT,EAAS,AAAT,OAAS;QAE9B,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;QAC9B,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;QAC9B,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;IAChC,CAAC,MAAM,CAAC;QACN,EAAa,AAAb,WAAa;QACb,GAAG,CAAC,CAAC,GAAG,CAAC;QACT,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACtB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QACnB,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAG;QAClE,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,KAAK;QACpB,KAAK,GAAG,GAAG,GAAG,KAAK;QACnB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK;QAC9C,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK;QAC9C,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK;IAChD,CAAC;IAED,MAAM,CAAC,GAAG;AACZ,CAAC;SAYe,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACvC,GAAG,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAK;IACrC,CAAC,IAAI,SAAS;IACd,CAAC,IAAI,SAAS;IACd,CAAC,IAAI,SAAS;IACd,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,GAAG,CAAC,CAAC,EAAE,CAAC;IACtB,MAAM,CAAC,CAAO,SAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAG;AACvE,CAAC;AASM,GAAG,CAAC,KAAK,GAAG,OAAI,CAAC,KAAK;AAYtB,GAAG,CAAC,UAAU,GAAG,OAAI,CAAC,UAAU;AAUhC,GAAG,CAAC,IAAI,GAAG,OAAI,CAAC,IAAI;AAapB,GAAG,CAAC,GAAG,GAAG,OAAI,CAAC,GAAG;AAWlB,GAAG,CAAC,GAAG,GAAG,OAAI,CAAC,GAAG;AAMlB,GAAG,CAAC,GAAG,GAAG,QAAQ;AAWlB,GAAG,CAAC,KAAK,GAAG,OAAI,CAAC,KAAK;AAUtB,GAAG,CAAC,GAAG,GAAG,OAAI,CAAC,GAAG;AAYlB,GAAG,CAAC,IAAI,GAAG,OAAI,CAAC,IAAI;AAQpB,GAAG,CAAC,MAAM,GAAG,OAAI,CAAC,MAAM;AAMxB,GAAG,CAAC,GAAG,GAAG,MAAM;AAShB,GAAG,CAAC,aAAa,GAAG,OAAI,CAAC,aAAa;AAMtC,GAAG,CAAC,MAAM,GAAG,aAAa;AAU1B,GAAG,CAAC,SAAS,GAAG,OAAI,CAAC,SAAS;AAS9B,GAAG,CAAC,WAAW,GAAG,OAAI,CAAC,WAAW;AASlC,GAAG,CAAC,MAAM,GAAG,OAAI,CAAC,MAAM;AAaxB,GAAG,CAAC,UAAU,GAAG,QAAQ,GAAI,CAAC;IACnC,GAAG,CAAC,OAAO,GAAG,OAAI,CAAC,MAAM;IACzB,GAAG,CAAC,SAAS,GAAG,OAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACvC,GAAG,CAAC,SAAS,GAAG,OAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACvC,MAAM,CAAC,QAAQ,CAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAC3B,GAAG,CAAC,IAAG,GAAG,OAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QAEvB,EAAE,EAAE,IAAG,GAAG,SAAS,EAAE,CAAC;YACpB,OAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC;YAChC,EAAE,EAAE,OAAI,CAAC,GAAG,CAAC,OAAO,IAAI,QAAQ,EAAE,OAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC;YAClE,OAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO;YAC/B,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE;YAClC,MAAM,CAAC,GAAG;QACZ,CAAC,MAAM,EAAE,EAAE,IAAG,GAAG,QAAQ,EAAE,CAAC;YAC1B,GAAG,CAAC,CAAC,IAAI,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,CAAC;YACV,MAAM,CAAC,GAAG;QACZ,CAAC,MAAM,CAAC;YACN,OAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;YACxB,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;YAClB,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;YAClB,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC;YAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAG;YAChB,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG;QAC3B,CAAC;IACH,CAAC;AACH,CAAC;AAaM,GAAG,CAAC,MAAM,GAAG,QAAQ,GAAI,CAAC;IAC/B,GAAG,CAAC,KAAK,GAAG,MAAM;IAClB,GAAG,CAAC,KAAK,GAAG,MAAM;IAClB,MAAM,CAAC,QAAQ,CAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACpC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACpB,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACpB,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;QACvC,MAAM,CAAC,GAAG;IACZ,CAAC;AACH,CAAC;AAYM,GAAG,CAAC,OAAO,GAAG,QAAQ,GAAI,CAAC;IAChC,GAAG,CAAC,IAAI,GAAG,OAAI,CAAC,MAAM;IACtB,MAAM,CAAC,QAAQ,CAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACtC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QACjB,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI;IAC1C,CAAC;AACH,CAAC;;;;;ACpsBD,EAGG,AAHH;;;CAGG,AAHH,EAGG,CAEH,EAIG,AAJH;;;;CAIG,AAJH,EAIG,6CAEa,MAAM;;AAWtB,EAKG,AALH;;;;;CAKG,AALH,EAKG,4CAEa,KAAK;;AAOrB,EAKG,AALH;;;;;CAKG,AALH,EAKG,6CAEa,MAAM;;AAMtB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,iDAEa,UAAU;;AAO1B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,2CAEa,IAAI;;AAMpB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,0CAEa,GAAG;;AAMnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAMnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AAMxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AAMxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,6CAEa,MAAM;;AAMtB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,2CAEa,IAAI;;AAMpB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,4CAEa,KAAK;;AAMrB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAMnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAMnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,4CAEa,KAAK;;AAMrB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,4CAEa,KAAK;;AAMrB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,kDAEa,WAAW;;AAM3B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,+CAEa,QAAQ;;AAMxB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,sDAEa,eAAe;;AAM/B,EAKG,AALH;;;;;CAKG,AALH,EAKG,oDAEa,aAAa;;AAM7B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AAMtB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,8CAEa,OAAO;;AAMvB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,gDAEa,SAAS;;AAgBzB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,0CAEa,GAAG;;AAGnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,4CAEa,KAAK;;AAYrB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,2CAEa,IAAI;;AASpB,EAUG,AAVH;;;;;;;;;;CAUG,AAVH,EAUG,8CAEa,OAAO;;AAWvB,EAUG,AAVH;;;;;;;;;;CAUG,AAVH,EAUG,6CAEa,MAAM;;AAatB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AAUtB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,oDAEa,aAAa;;AAW7B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,oDAEa,aAAa;;AAS7B,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,oDAEa,aAAa;;AAiC7B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAiBvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAiBvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAiBvB,EAKG,AALH;;;;;CAKG,AALH,EAKG,4CAEa,KAAK;;AAarB,EAKG,AALH;;;;;CAKG,AALH,EAKG,2CAEa,IAAI;;AAMpB,EAKG,AALH;;;;;CAKG,AALH,EAKG,0CAEa,GAAG;;AAGnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,kDAEa,WAAW;;AAG3B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;yCAcX,GAAG;;yCAMH,GAAG;;yCAMH,GAAG;;0CAMH,IAAI;;6CAMJ,OAAO;;yCAMP,GAAG;;4CAMH,MAAM;;6CAcN,OAAO;;AAnvBlB,GAAM;SAYU,MAAM,GAAG,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAEnC,EAAE,EAAE,SAAQ,CAAC,UAAU,IAAI,YAAY,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACZ,CAAC;IAED,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,KAAK,CAAC,CAAC,EAAE,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,MAAM,CAAC,CAAC,EAAE,CAAC;IACzB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AAC3B,CAAC;SAUe,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAChC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,MAAK,EAAE,CAAC;IAC7C,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AAC3B,CAAC;SASe,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACrC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AAC9B,CAAC;SAQe,aAAa,CAAC,CAAC,EAAE,CAAC;IAChC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AAC9B,CAAC;SASe,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,IAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAE/B,EAAE,EAAE,IAAG,GAAG,CAAC,EACT,EAAyC,AAAzC,uCAAyC;IACzC,IAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAG;IAGzB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAG;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAG;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAG;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACzB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;SAUe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAChC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC1B,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAClC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,MAAM,CAAC,GAAG;AACZ,CAAC;SAae,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC3C,GAAG,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC;IACxB,GAAG,CAAC,OAAO,GAAG,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IAC5C,GAAG,CAAC,OAAO,GAAG,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;IACxC,GAAG,CAAC,OAAO,GAAG,YAAY,IAAI,CAAC,GAAG,CAAC;IACnC,GAAG,CAAC,OAAO,GAAG,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IACvC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,MAAM,CAAC,GAAG;AACZ,CAAC;SAae,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC1C,GAAG,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACzB,GAAG,CAAC,qBAAqB,GAAG,aAAa,GAAG,aAAa;IACzD,GAAG,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC;IACxB,GAAG,CAAC,OAAO,GAAG,qBAAqB,GAAG,aAAa;IACnD,GAAG,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,qBAAqB;IAC3C,GAAG,CAAC,OAAO,GAAG,CAAC,GAAG,YAAY,GAAG,aAAa;IAC9C,GAAG,CAAC,OAAO,GAAG,YAAY,GAAG,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,OAAO;IAC1E,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,MAAM,CAAC,GAAG,EAAE,MAAK,EAAE,CAAC;IAClC,MAAK,GAAG,MAAK,IAAI,CAAG;IACpB,GAAG,CAAC,CAAC,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAG,GAAG,IAAI,CAAC,EAAE;IACzC,GAAG,CAAC,CAAC,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAG,GAAG,CAAG;IACrC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAG,GAAG,CAAC,GAAG,CAAC,IAAI,MAAK;IAC3C,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM;IAC7B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM;IAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,MAAK;IAClB,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;IAC9C,CAAC,GAAG,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACrD,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACrD,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;IACtD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,EAAiF,AAAjF,+EAAiF;IACjF,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,EAAG,CAA2B,AAA3B,EAA2B,AAA3B,yBAA2B;IACzC,EAAoC,AAApC,kCAAoC;IAEpC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EACrB,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EACrB,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAE,CAAsC,AAAtC,EAAsC,AAAtC,oCAAsC;IAEjE,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAC1B,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAC1B,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAE,CAA6B,AAA7B,EAA6B,AAA7B,2BAA6B;IAE7D,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IACf,GAAG,IAAI,EAAE;IACT,GAAG,IAAI,EAAE;IACT,GAAG,IAAI,EAAE,CAAE,CAA2B,AAA3B,EAA2B,AAA3B,yBAA2B;IAEtC,IAAI,IAAI,CAAC;IACT,IAAI,IAAI,CAAC;IACT,IAAI,IAAI,CAAC,CAAE,CAAmD,AAAnD,EAAmD,AAAnD,iDAAmD;IAE9D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI;IACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI;IACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACvC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EACN,CAAC,GAAG,CAAC,CAAC,CAAE,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAE3C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAG,CAAkB,AAAlB,EAAkB,AAAlB,gBAAkB;IAEtC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG;IACjD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,EAAG,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAEnF,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACvC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EACN,CAAC,GAAG,CAAC,CAAC,CAAE,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAE3C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAG,CAAkB,AAAlB,EAAkB,AAAlB,gBAAkB;IAEtC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG;IACjD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,EAAG,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAEnF,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACvC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EACN,CAAC,GAAG,CAAC,CAAC,CAAE,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAE3C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAG,CAAkB,AAAlB,EAAkB,AAAlB,gBAAkB;IAEtC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG;IACjD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG;IACjD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAG,CAA+B,AAA/B,EAA+B,AAA/B,6BAA+B;IAE5C,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC3B,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAC5C,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAC5C,GAAG,GAAG,IAAI,GAAG,IAAI,EACjB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG;IACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC;AACnD,CAAC;SAQe,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,GAAG,CAAC,CAAC,EAAE,CAAC;IACtB,MAAM,CAAC,CAAO,SAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAG;AACzD,CAAC;SASe,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACjC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACvD,CAAC;SASe,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;AAClQ,CAAC;AAMM,GAAG,CAAC,GAAG,GAAG,QAAQ;AAMlB,GAAG,CAAC,GAAG,GAAG,QAAQ;AAMlB,GAAG,CAAC,GAAG,GAAG,MAAM;AAMhB,GAAG,CAAC,IAAI,GAAG,QAAQ;AAMnB,GAAG,CAAC,OAAO,GAAG,eAAe;AAM7B,GAAG,CAAC,GAAG,GAAG,MAAM;AAMhB,GAAG,CAAC,MAAM,GAAG,aAAa;AAc1B,GAAG,CAAC,OAAO,GAAG,QAAQ,GAAI,CAAC;IAChC,GAAG,CAAC,GAAG,GAAG,MAAM;IAChB,MAAM,CAAC,QAAQ,CAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;QACnD,GAAG,CAAC,CAAC,EAAE,CAAC;QAER,EAAE,GAAG,MAAM,EACT,MAAM,GAAG,CAAC;QAGZ,EAAE,GAAG,MAAM,EACT,MAAM,GAAG,CAAC;QAGZ,EAAE,EAAE,KAAK,EACP,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM;aAE9C,CAAC,GAAG,CAAC,CAAC,MAAM;QAGd,GAAG,CAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAE,CAAC;YACpC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;YAChB,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,CAAC;IACV,CAAC;AACH,CAAC;;;;;ACjxBD,EAGG,AAHH;;;CAGG,AAHH,EAGG,CAEH,EAIG,AAJH;;;;CAIG,AAJH,EAIG,6CAEa,MAAM;;AAYtB,EAKG,AALH;;;;;CAKG,AALH,EAKG,4CAEa,KAAK;;AAQrB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,iDAEa,UAAU;;AAQ1B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,2CAEa,IAAI;;AAOpB,EASG,AATH;;;;;;;;;CASG,AATH,EASG,0CAEa,GAAG;;AAOnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAOnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AAOxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AAOxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,6CAEa,MAAM;;AAOtB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,2CAEa,IAAI;;AAOpB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,4CAEa,KAAK;;AAOrB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAOnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0CAEa,GAAG;;AAOnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,4CAEa,KAAK;;AAOrB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,4CAEa,KAAK;;AAOrB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,kDAEa,WAAW;;AAO3B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,+CAEa,QAAQ;;AAOxB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,sDAEa,eAAe;;AAO/B,EAKG,AALH;;;;;CAKG,AALH,EAKG,6CAEa,MAAM;;AAOtB,EAKG,AALH;;;;;CAKG,AALH,EAKG,oDAEa,aAAa;;AAO7B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AAOtB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,8CAEa,OAAO;;AAOvB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,gDAEa,SAAS;;AAiBzB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,0CAEa,GAAG;;AAGnB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,4CAEa,KAAK;;AAiBrB,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,2CAEa,IAAI;;AAWpB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AA2BtB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,oDAEa,aAAa;;AAW7B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,oDAEa,aAAa;;AAoB7B,EAKG,AALH;;;;;CAKG,AALH,EAKG,2CAEa,IAAI;;AAOpB,EAKG,AALH;;;;;CAKG,AALH,EAKG,0CAEa,GAAG;;AAGnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,kDAEa,WAAW;;AAG3B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;yCAgBX,GAAG;;yCAMH,GAAG;;yCAMH,GAAG;;0CAMH,IAAI;;6CAMJ,OAAO;;yCAMP,GAAG;;4CAMH,MAAM;;6CAcN,OAAO;;AArnBlB,GAAM;SAYU,MAAM,GAAG,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAEnC,EAAE,EAAE,SAAQ,CAAC,UAAU,IAAI,YAAY,EAAE,CAAC;QACxC,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACZ,CAAC;IAED,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,KAAK,CAAC,CAAC,EAAE,CAAC;IACxB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACtC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAYe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACpC,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAChC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IACjB,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,MAAK,EAAE,CAAC;IAC7C,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,MAAK;IAC5B,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAC9B,CAAC;SASe,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACrC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACtC,CAAC;SAQe,MAAM,CAAC,CAAC,EAAE,CAAC;IACzB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAC9B,CAAC;SAQe,aAAa,CAAC,CAAC,EAAE,CAAC;IAChC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;AACtC,CAAC;SASe,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACb,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAG,GAAG,CAAC,CAAC,CAAC;IAClB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACjC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,IAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAEvC,EAAE,EAAE,IAAG,GAAG,CAAC,EACT,IAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAG;IAGzB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAG;IAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAG;IAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAG;IAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAG;IAChB,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACzB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7D,CAAC;SAWe,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAChC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC9B,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IAC9B,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACjC,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAClC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;IAC5B,MAAM,CAAC,GAAG;AACZ,CAAC;SASe,MAAM,CAAC,GAAG,EAAE,MAAK,EAAE,CAAC;IAClC,MAAK,GAAG,MAAK,IAAI,CAAG,CAAE,CAA4D,AAA5D,EAA4D,AAA5D,0DAA4D;IAClF,EAA0D,AAA1D,wDAA0D;IAC1D,EAAmD,AAAnD,iDAAmD;IAEnD,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAClB,GAAG,CAAC,EAAE,EAAE,EAAE;OAEP,CAAC;QACF,EAAE,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC;QAC9B,EAAE,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACxB,CAAC,OAAQ,EAAE,IAAI,CAAC;OAEb,CAAC;QACF,EAAE,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC;QAC9B,EAAE,GAAG,SAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC;QAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACxB,CAAC,OAAQ,EAAE,IAAI,CAAC;IAEhB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE;IAC/B,GAAG,CAAC,CAAC,IAAI,MAAK,GAAG,EAAE;IACnB,GAAG,CAAC,CAAC,IAAI,MAAK,GAAG,EAAE;IACnB,GAAG,CAAC,CAAC,IAAI,MAAK,GAAG,EAAE,GAAG,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,MAAK,GAAG,EAAE,GAAG,CAAC;IACvB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;IACnD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;IACnD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;IACpD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;IACpD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACxC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC,GACP,CAAC,GAAG,CAAC,CAAC,CAAC;IACX,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,EAAG,CAAuB,AAAvB,EAAuB,AAAvB,qBAAuB;IAEtC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IACjC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IACjC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IACjC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAE,CAAkC,AAAlC,EAAkC,AAAlC,gCAAkC;IAEtE,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;IACjD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;IACjD,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE;IACjD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,GAAG,CAAC,CAAC,IAAI,CAAG;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,GAAG,CAAC,CAAC,EAAE,CAAC;IACtB,MAAM,CAAC,CAAO,SAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAG;AACvE,CAAC;SASe,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACjC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACxE,CAAC;SASe,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,SAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAG,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE;AACvV,CAAC;AAMM,GAAG,CAAC,GAAG,GAAG,QAAQ;AAMlB,GAAG,CAAC,GAAG,GAAG,QAAQ;AAMlB,GAAG,CAAC,GAAG,GAAG,MAAM;AAMhB,GAAG,CAAC,IAAI,GAAG,QAAQ;AAMnB,GAAG,CAAC,OAAO,GAAG,eAAe;AAM7B,GAAG,CAAC,GAAG,GAAG,MAAM;AAMhB,GAAG,CAAC,MAAM,GAAG,aAAa;AAc1B,GAAG,CAAC,OAAO,GAAG,QAAQ,GAAI,CAAC;IAChC,GAAG,CAAC,GAAG,GAAG,MAAM;IAChB,MAAM,CAAC,QAAQ,CAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;QACnD,GAAG,CAAC,CAAC,EAAE,CAAC;QAER,EAAE,GAAG,MAAM,EACT,MAAM,GAAG,CAAC;QAGZ,EAAE,GAAG,MAAM,EACT,MAAM,GAAG,CAAC;QAGZ,EAAE,EAAE,KAAK,EACP,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM;aAE9C,CAAC,GAAG,CAAC,CAAC,MAAM;QAGd,GAAG,CAAE,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAE,CAAC;YACpC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;YAChB,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,CAAC;IACV,CAAC;AACH,CAAC;;;;;ACnpBD,EAMG,AANH;;;;;;CAMG,AANH,EAMG,CAEH,EAIG,AAJH;;;;CAIG,AAJH,EAIG,6CAEa,MAAM;;AAgBtB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,4CAEa,KAAK;;AAYrB,EAaG,AAbH;;;;;;;;;;;;;CAaG,AAbH,EAaG,iDAEa,UAAU;;AAY1B,EAYG,AAZH;;;;;;;;;;;;CAYG,AAZH,EAYG,oEAEa,6BAA6B;;AAe7C,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,8DAEa,uBAAuB;;AAkBvC,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,sDAEa,eAAe;;AAW/B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,mDAEa,YAAY;;AAW5B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;AASxB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,2CAEa,IAAI;;AAWpB,EAKG,AALH;;;;;CAKG,AALH,EAKG,+CAEa,QAAQ;;AAWxB,EAcG,AAdH;;;;;;;;;;;;;;CAcG,AAdH,EAcG,0CAEa,GAAG;;6CAkBR,OAAO;;AAClB,EAKG,AALH;;;;;CAKG,AALH,EAKG,8CAEa,OAAO;;6CAgBZ,OAAO;;AAClB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAOvB,EAKG,AALH;;;;;CAKG,AALH,EAKG,qDAEa,cAAc;;AAc9B,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,gDAEa,SAAS;;AAsBzB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAwBvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAwBvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,8CAEa,OAAO;;AAwBvB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,yDAEa,kBAAkB;;AAuBlC,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,0DAEa,mBAAmB;;AAuBnC,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,uDAEa,gBAAgB;;AA+BhC,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,0CAEa,GAAG;;AAWnB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,+CAEa,QAAQ;;yCAgCb,GAAG;;AACd,EAQG,AARH;;;;;;;;CAQG,AARH,EAQG,4CAEa,KAAK;;yCAoBV,GAAG;;AACd,EASG,AATH;;;;;;;;;CASG,AATH,EASG,2CAEa,IAAI;;AAapB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AAYtB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,gDAEa,SAAS;;4CAmBd,MAAM;;yCAMN,GAAG;;mDASH,aAAa;;4CAMb,MAAM;;AACjB,EAOG,AAPH;;;;;;;CAOG,AAPH,EAOG,gDAEa,SAAS;;AA0BzB,EAKG,AALH;;;;;CAKG,AALH,EAKG,0CAEa,GAAG;;AAGnB,EAMG,AANH;;;;;;CAMG,AANH,EAMG,kDAEa,WAAW;;AAG3B,EAMG,AANH;;;;;;CAMG,AANH,EAMG,6CAEa,MAAM;;AAhzBtB,GAAM;AACN,GAAM;AACN,GAAM;SAeU,MAAM,GAAG,CAAC;IACxB,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAElC,EAAE,EAAE,SAAQ,CAAC,UAAU,IAAI,YAAY,EAAE,CAAC;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;QACT,EAAE,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC;IACT,MAAM,CAAC,EAAE;AACX,CAAC;SASe,KAAK,CAAC,CAAC,EAAE,CAAC;IACxB,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,EAAE;AACX,CAAC;SAgBe,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC1D,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,MAAM,CAAC,EAAE;AACX,CAAC;SAee,6BAA6B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACzE,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,EAAE,CAAC,CAAC,IAAI,EAAE;IACV,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,GAAG,EACb,EAAE,GAAG,EAAE,GAAG,GAAG,EACb,EAAE,GAAG,EAAE,GAAG,GAAG;IACjB,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,MAAM,CAAC,EAAE;AACX,CAAC;SAWe,uBAAuB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAClD,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EACf,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EACf,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EACf,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACpC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IACrC,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACvC,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,YAAY,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACpC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAChC,EAAoB,AAApB,kBAAoB;IACpB,GAAG,CAAC,KAAK,GAAG,OAAI,CAAC,MAAM;IACvB,OAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IACzB,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,SAAQ,CAAC,UAAU,CAAC,CAAC;IACjC,OAAI,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC;IACxB,uBAAuB,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC;IACrC,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,QAAQ,CAAC,GAAG,EAAE,CAAC;IAC7B,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,CAAC;IACV,MAAM,CAAC,GAAG;AACZ,CAAC;SAiBe,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACxD,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,GAAG,CAAC,CAAC,IAAI,EAAE;IACX,MAAM,CAAC,GAAG;AACZ,CAAC;AAQM,GAAG,CAAC,OAAO,GAAG,OAAI,CAAC,IAAI;SAQd,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;AAUM,GAAG,CAAC,OAAO,GAAG,OAAI,CAAC,IAAI;SAUd,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACZ,MAAM,CAAC,GAAG;AACZ,CAAC;SAQe,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;IACtC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACpD,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACpD,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACpD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACpC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EAChB,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EAChB,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EAChB,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,IAAI,GAAG;IACZ,GAAG,CAAC,CAAC,IAAI,GAAG;IACZ,GAAG,CAAC,CAAC,IAAI,GAAG;IACZ,GAAG,CAAC,CAAC,IAAI,GAAG;IACZ,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IAChD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IAChD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IAChD,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACjD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC/C,OAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG;IACxB,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC/C,OAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG;IACxB,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;IACpC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,IAAI,CAAC,CAAC,CAAC,GACT,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAC3C,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC/C,OAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG;IACxB,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,EAAE,GAAG,GAAG,CAAC,CAAC;IACV,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,kBAAkB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC7C,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,mBAAmB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9C,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACR,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;IACnD,EAA0B,AAA1B,wBAA0B;IAC1B,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,SAAQ,CAAC,OAAO,EAClC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IAGpB,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACpD,GAAG,GAAG,GAAG,GAAG,GAAG;IACf,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACpB,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,UAAU;IACjC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,UAAU;IACjC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,UAAU;IACjC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG;IACrB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;IAClD,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC,GACR,EAAE,GAAG,CAAC,CAAC,CAAC;IACZ,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC9C,MAAM,CAAC,GAAG;AACZ,CAAC;SAWe,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG;AACZ,CAAC;SAUe,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC,GACT,GAAG,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtD,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtG,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtG,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;IACtG,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-900e2ded8fe2c4a1.js","src/index.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-9b8571eeb0b41b2e.js","node_modules/gl-matrix/esm/index.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-1dd6835f72cf8335.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"5c1b77e3b71e74eb\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","/// <reference types=\"@webgpu/types\" />\n\nconsole.log(\"Hello world!\");\nimport computeShader from \"bundle-text:./compute-shader.wgsl\";\nimport drawShader from \"bundle-text:./draw-shader.wgsl\";\nimport { vec3 } from \"gl-matrix\";\n\n// SECTION ON ALIGNMENT...\n// https://surma.dev/things/webgpu/\n\n// you have to pad a vec3 because of alignment\nconst VERTEX_COUNT = 6;\nconst ENTITIES_COUNT = 200;\nconst STRIDE = 4 + 4; // vec3 position + padding, vec3 velocity, float mass\nconst BUFFER_SIZE = STRIDE * Float32Array.BYTES_PER_ELEMENT * ENTITIES_COUNT;\n\nconst canvas = document.querySelector(\"canvas\") as HTMLCanvasElement;\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nlet ctx: GPUCanvasContext;\nlet presentationFormat;\n\nlet device: GPUDevice;\nlet bufferA, bufferB, gpuReadBuffer, vertexDataBuffer;\n\nlet bindGroupLayout, bindGroupPing, bindGroupPong;\nlet shaderModule, computePipeline;\n\nlet renderPipeline;\nlet renderPassDesc: GPURenderPassDescriptor;\n\nlet renderables: HTMLElement[] = [];\n\nlet entityData = new Float32Array(new ArrayBuffer(BUFFER_SIZE));\nfor (let entity = 0; entity < ENTITIES_COUNT; entity++) {\n  const position = vec3.fromValues(\n    Math.random() * window.innerWidth,\n    Math.random() * window.innerHeight,\n    0\n  );\n\n  entityData[entity * STRIDE + 0] = position[0]; // position.x\n  entityData[entity * STRIDE + 1] = position[1]; // position.y\n  entityData[entity * STRIDE + 2] = position[2]; // position.z\n\n  entityData[entity * STRIDE + 4] = 0; // velocity.x\n  entityData[entity * STRIDE + 5] = 0; // velocity.y\n  entityData[entity * STRIDE + 6] = 0; // velocity.z\n\n  entityData[entity * STRIDE + 7] = 0.5 + Math.random(); // mass\n}\n\nconst setupCanvasCtx = () => {\n  ctx = canvas.getContext(\"webgpu\") as GPUCanvasContext;\n  presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  ctx.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: \"opaque\",\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n};\n\nconst setupDOMRenderer = () => {\n  for (let i = 0; i < ENTITIES_COUNT; i++) {\n    const div = document.createElement(\"div\");\n    div.innerHTML = `💩`;\n    div.style.position = \"fixed\";\n    div.style.top = \"-1ch\";\n    div.style.left = \"-1ch\";\n    renderables.push(div);\n  }\n  document.body.append(...renderables);\n};\n\nconst requestWebGPU = async () => {\n  if (device) return device;\n\n  const adapter = await navigator.gpu.requestAdapter();\n  if (!adapter) {\n    console.warn(\"Could not access Adapter\");\n    return;\n  }\n  device = await adapter.requestDevice();\n  return device;\n};\n\nconst createBuffers = () => {\n  // we don't need it mapped or filled because we do this at the start of each compute loop;\n  bufferA = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, // DST because we copy the result back into this after computation\n  });\n\n  bufferB = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC, // SRC because we copy from this into the gpu read staging buffer\n  });\n\n  gpuReadBuffer = device.createBuffer({\n    size: BUFFER_SIZE,\n    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n  });\n\n  vertexDataBuffer = device.createBuffer({\n    size: VERTEX_COUNT * 2 * 2 * Float32Array.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n\n  // prettier-ignore\n  new Float32Array(vertexDataBuffer.getMappedRange()).set([\n    1, 1,     1, 0, //position, uv\n    1, -1,    1, 1, \n    -1, -1,   0, 1, \n\n    1, 1,     1, 0, \n    -1, -1,   0, 1, \n    -1, 1,    0, 0,\n  ]);\n\n  vertexDataBuffer.unmap();\n};\n\nconst createBindGroups = () => {\n  // A bind group layout defines the input/output interface expected by a shader\n  bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n        buffer: { type: \"read-only-storage\" },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: \"storage\" },\n      },\n    ],\n  });\n\n  // A bind group represents the actual input/output data for a shader.\n  bindGroupPing = device.createBindGroup({\n    layout: bindGroupLayout,\n    entries: [\n      { binding: 0, resource: { buffer: bufferA } },\n      { binding: 1, resource: { buffer: bufferB } },\n    ],\n  });\n\n  bindGroupPong = device.createBindGroup({\n    layout: bindGroupLayout,\n    entries: [\n      { binding: 0, resource: { buffer: bufferA } },\n      { binding: 1, resource: { buffer: bufferB } },\n    ],\n  });\n};\n\nconst createComputePipeline = () => {\n  shaderModule = device.createShaderModule({\n    code: computeShader,\n  });\n\n  computePipeline = device.createComputePipeline({\n    layout: device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout],\n    }),\n    compute: {\n      module: shaderModule,\n      entryPoint: \"main\",\n    },\n  });\n};\n\nconst createComputeCommands = () => {\n  const commandEncoder = device.createCommandEncoder();\n  const computePass = commandEncoder.beginComputePass();\n  computePass.setPipeline(computePipeline);\n  computePass.setBindGroup(0, bindGroupPing);\n\n  computePass.dispatchWorkgroups(Math.ceil(ENTITIES_COUNT / 256));\n  computePass.end();\n\n  commandEncoder.copyBufferToBuffer(bufferB, 0, gpuReadBuffer, 0, BUFFER_SIZE);\n\n  return commandEncoder.finish();\n};\n\nconst compute = async () => {\n  performance.mark(\"compute.start\");\n  device.queue.writeBuffer(bufferA, 0, entityData);\n\n  device.queue.submit([createComputeCommands()]);\n\n  // Read buffer.\n  await gpuReadBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n  const arrayBuffer = gpuReadBuffer.getMappedRange(0, BUFFER_SIZE).slice();\n  const outputData = new Float32Array(arrayBuffer);\n  gpuReadBuffer.unmap();\n  entityData = outputData;\n\n  performance.mark(\"compute.end\");\n  // console.log(\n  //   performance.measure(\"compute.duration\", \"compute.start\", \"compute.end\")\n  //     .duration\n  // );\n  performance.clearMarks();\n  performance.clearMeasures();\n\n  requestAnimationFrame(compute);\n};\n\nconst createRenderPipeline = async () => {\n  // Setup shader modules\n  const shaderModule = device.createShaderModule({ code: drawShader });\n  await shaderModule.compilationInfo();\n\n  const vertexState: GPURenderPipelineDescriptor[\"vertex\"] = {\n    module: shaderModule,\n    entryPoint: \"vertex_main\",\n    buffers: [\n      {\n        arrayStride: 2 * 2 * 4, // 2 attributes of 2 elements, each float32 (takes up 4 bytes)\n        attributes: [\n          {\n            format: \"float32x2\" as GPUVertexFormat,\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: \"float32x2\" as GPUVertexFormat,\n            offset: 2 * 4,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n\n  const fragmentState = {\n    module: shaderModule,\n    entryPoint: \"fragment_main\",\n    targets: [{ format: presentationFormat }],\n  };\n\n  const depthFormat = \"depth24plus-stencil8\";\n  const depthTexture = device.createTexture({\n    size: {\n      width: canvas.width,\n      height: canvas.height,\n      depthOrArrayLayers: 1,\n    },\n    format: depthFormat,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  renderPipeline = device.createRenderPipeline({\n    layout: device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout],\n    }),\n    vertex: vertexState,\n    fragment: fragmentState,\n    depthStencil: {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: \"less\",\n    },\n  });\n\n  renderPassDesc = {\n    colorAttachments: [\n      {\n        view: ctx.getCurrentTexture().createView(), // Assigned later\n        clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        loadOp: \"clear\",\n        storeOp: \"store\",\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthClearValue: 1.0,\n      depthLoadOp: \"clear\",\n      depthStoreOp: \"store\",\n      stencilLoadOp: \"clear\",\n      stencilStoreOp: \"store\",\n    },\n  };\n};\n\nconst renderDOM = () => {\n  for (let entity = 0; entity < ENTITIES_COUNT; entity++) {\n    const x = entityData[entity * STRIDE + 0]; // position.x\n    const y = entityData[entity * STRIDE + 1]; // position.y\n    const z = entityData[entity * STRIDE + 2]; // position.z\n\n    const transform = `translate3d(${x}px, ${y}px, ${z}px)`;\n\n    renderables[entity].style.transform = transform;\n  }\n\n  requestAnimationFrame(renderDOM);\n};\n\nconst render = () => {\n  renderPassDesc.colorAttachments[0].view = ctx\n    .getCurrentTexture()\n    .createView();\n\n  const commandEncoder = device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass(renderPassDesc);\n\n  renderPass.setPipeline(renderPipeline);\n  renderPass.setBindGroup(0, bindGroupPing);\n  renderPass.setVertexBuffer(0, vertexDataBuffer);\n  renderPass.draw(VERTEX_COUNT, 1, 0, 0);\n  renderPass.end();\n\n  device.queue.submit([commandEncoder.finish()]);\n  requestAnimationFrame(render);\n};\n\n(async () => {\n  if (!navigator.gpu) {\n    alert(\n      \"WebGPU not available! — Use Chrome Canary and enable-unsafe-gpu in flags.\"\n    );\n    return;\n  }\n\n  // setupDOMRenderer();\n  await requestWebGPU();\n  setupCanvasCtx();\n  createBuffers();\n  createBindGroups();\n  createComputePipeline();\n  await createRenderPipeline();\n  requestAnimationFrame(compute);\n  // requestAnimationFrame(renderDOM);\n  requestAnimationFrame(render);\n})();\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","module.exports = \"6dbf1c1fac076ff7\";","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","module.exports = \"c99b10a4f0bb15b7\";"],"names":[],"version":3,"file":"index.b71e74eb.js.map","sourceRoot":"/__parcel_source_root/"}